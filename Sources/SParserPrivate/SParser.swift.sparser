imports
  Foundation
  SParserLibs
syntax
  type
    public Syntax
  ::= importRule? rules:rule*
    return Syntax(imports: importRule ?? [], rules: rules)
importRule
  type
    private [String]
  ::= "imports\n" indent imports:line+ dedent
    return imports
rule
  type
    private Rule
  ::= name "\n" indent "type\n" indent accessLevel? type:line dedent patterns dedent
    return Rule(name: name, accessLevel: accessLevel ?? .internal, type: type, patterns: patterns)
accessLevel
  type
    private AccessLevel
  ::= "public "
    return .public
  ::= "internal "
    return .internal
  ::= "private "
    return .private
patterns
  type
    private [Pattern]
  ::= patterns pattern
    return patterns + [Pattern(terms: pattern.terms, evaluator: pattern.evaluator, id: patterns.count)]
  ::=
    return []
pattern
  type
    private Pattern
  ::= "::=" cws terms:term* "\n" multiLineString
    return Pattern(terms: terms, evaluator: multiLineString, id: 0)
term
  type
    private Term
  ::= "indent" cws
    return .indent
  ::= "dedent" cws
    return .dedent
  ::= name ":" type:name termModifier? cws
    return .type(name: name, type: type, modifier: termModifier ?? .one)
  ::= type:name termModifier? cws
    return .type(name: nil, type: type, modifier: termModifier ?? .one)
  ::= quotedString cws
    return .quoted(quotedString)
termModifier
  type
    private TermModifier
  ::= "?"
    return .optional
  ::= "+"
    return .oneOrMore
  ::= "*"
    return .zeroOrMore
name
  type
    private String
  ::= letter letterDigits
    return String(letter) + letterDigits

